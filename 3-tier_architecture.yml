AWSTemplateFormatVersion: "2010-09-09"
Description: "A 3-tier Architecture Template"


Parameters:
### Webserver Parameters
##AmazonMachineIDforWebservers:
  AMIIDforWebservers:
    Type: String
    Default: ami-0f960c8194f5d8df5
    Description: Input the AMIID

##InstanceTypeforWebservers:
  InstanceTypeParameterForWebservers:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t3.large
      - m1.small
      - m1.large
    Description: Enter either t2.micro, t3.large, m1.small or m1.large

##KeyNameforWebservers
  KeypairforWebservers:
    Type: String
    Default: AWS::EC2::KeyPair::KeyName
    Description: Choose the desired keypair

##DeviceNameWebservers:
  DevicenameWebservers:
    Type: String
    AllowedValues:
      - /dev/sdh 
      - xvdh

##VolumeSizeWebservers:
  VolumeSizeWebservers:
    Type: Number
    Default: "10"
    MinValue: "8"
    MaxValue: "40"

##VolumeTypeWebservers:
  VolumeTypeWebservers:
    Type: String
    AllowedValues:
      - gp2
      - gp3

##SecurityGroupPortsWebservers:
  SecurityGroupPortsWebserversPrivate:
    Type: String
    AllowedValues:
      - 22
      - 80
      - 8080

##SecurityGroupPortsWebservers:
  SecurityGroupPortsWebservers:
    Type: String
    AllowedValues:
      - 22
      - 80
      - 8080

##CIDRBlocks
  MySourceIpA:
    Description: Ip address to access the Instance privately
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 102.244.157.244/32
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"


##CIDRBlocks
  MySourceIpB:
    Description: Ip address to access the Instance by anyone
    Type: String
    MinLength: "9"
    MaxLength: "18"
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"


### Appserver Parameters
##AmazonMachineIDforAppservers:
  AMIIDforAppservers:
    Type: String
    Default: ami-0022f774911c1d690
    Description: Input the AMIID

##InstanceTypeforAppservers:
  InstanceTypeParameterForAppservers:
    Type: String
    Default: t3.large
    AllowedValues:
      - t3.large
      - m1.small
      - m1.large
    Description: Enter either t3.large, m1.small or m1.large

##KeyNameforAppservers
  KeypairforAppservers:
    Type: String
    Default: AWS::EC2::KeyPair::KeyName
    Description: Choose the desired keypair

##DeviceNameAppservers:
  DevicenameAppservers:
    Type: String
    AllowedValues:
      - /dev/sdh 
      - xvdh   

##VolumeSizeAppservers:
  VolumeSizeAppservers:
    Type: Number
    Default: "10"
    MinValue: "8"
    MaxValue: "40"       

##VolumeTypeAppservers:
  VolumeTypeAppservers:
    Type: String
    AllowedValues:
      - gp2
      - gp3

##SecurityGroupPortsAppservers:
  SecurityGroupPortsAppservers:
    Type: String
    AllowedValues:
      - 22
      - 80
      - 8080


###DatabaseParameters
  
##RequiredStorageValue 
  RequiredStorage:
    Description: Enter the desired storage size
    Type: String
    MinValue: 100
    MaxValue: 150
    Default: 100

##RoleAssociation
  DatabaseRoles:
    Description: Assign a Role to Your DB
    FeatureName: String
    RolesArn: String    

##DatabaseClass
  DatabaseClass:
    Description: Input the database class
    Default: db.m6g
    AllowedValues:
      - db.m6g
      - db.m6gd
      - db.m6i
      - db.m5d

##RDSSecurityGroupsForDB
  RDSSecurityGroups:
    Type: AWS::RDS::SecurityGroup
    Properties: 
      DBSecurityGroupIngress: 
        CIDRIP: !Ref MySourceIpB
        EC2SecurityGroupId: !Ref SecurityGroupAppservers 
      EC2VpcId: !Ref VPC
      Tags: 
        - Key: "Name"
          Value: "Ventura_Database_SG" 

##DBSubnetGroups:
  DatabaseSubnetGroups:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Enter the SubnetGroups for Multi-AZ Deployment Purpose
      DBSubnetGroupName: ventura-subnetgroups-for-multiaz-deployment
      SubnetIds:
        Type: AWS::RDS::SubnetIds::Name
      Tags:
        - Key: Name
          Value: Ventura_SubnetGroups

##DatabasePassWord
  DatabasePassword:
    Type: String
    Default: //jjtech/database/default/password/

Metadata:
  AWS::Cloudformarion::Interface:
    ParameterGroup:
      - 
        Label:
          Default: "Parameters for Webservers"
        Parameters:
        - AMIIDforWebservers
        - InstanceTypeParameterForWebservers
        - KeypairforWebservers
        - DevicenameWebservers
        - VolumeSizeWebservers
        - VolumeTypeWebservers
        - SecurityGroupPortsWebserversPrivate
        - MySourceIpA
        - SecurityGroupPortsWebservers
        - MySourceIpB
      - 
        Label:
          Default: "Parameters for Appservers"
        Parameters:
        - AMIIDforAppservers
        - InstanceTypeParameterForAppservers
        - KeypairforAppservers
        - DevicenameAppservers
        - VolumeSizeAppservers
        - VolumeTypeAppservers
        - SecurityGroupPortsAppservers
        - MySourceIpA
      - Label:
          Default: "Parameters for RDS Database"
        Parameters:
        - RequiredStorage
        - DatabaseRoles
        - DatabaseClass
        - RDSSecurityGroups
        - DatabaseSubnetGroups
        - DatabasePassword
        
Resources:

##VirtualPrivateCloud
  VPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        Tags:
          - Key: "Name"
            Value: "Test_VPC"

##InternetGateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway


##VPCGateWayAttachment
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

##Subnet_Public_1
  PublicSubnetA: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-north-1a
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true

##Subnet_Public_2
  PublicSubnetB: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-north-1b
      CidrBlock: 10.1.0.0/24
      MapPublicIpOnLaunch: true

##RoutetablePublic
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

##InternetRoute
  InternetRoute: 
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref RouteTablePublic

##PublicSubnetARouteTableAssociation
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnetA

##PublicSubnetBRouteTableAssociation
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref PublicSubnetB

##Subnet_Private_1
  PrivateSubnetA: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-north-1a
      CidrBlock: 10.2.0.0/24
      MapPublicIpOnLaunch: false

##Subnet_Private_2
  PrivateSubnetB: 
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: eu-north-1b
      CidrBlock: 10.3.0.0/24
      MapPublicIpOnLaunch: false

##RoutetablePrivate
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

##LocalRoute
  LocalRoute: 
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 172.31.0.0/16
      RouteTableId: !Ref RouteTablePrivate

##PrivateSubnetARouteTableAssociation
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnetA

##PrivateSubnetBRouteTableAssociation
  PrivateSubnetDRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref PrivateSubnetB


##NetworkAccessControlLists(NACLs)
  NACLs:
    Type: AWS::EC2::NetworkAcl
    Properties: 
      Tags: 
        - Key: Name
          Value: Security_for_Test_VPC
      VpcId: !Ref VPC

##NATgatewayPublicSubnetA
  NATgatewaPublicSubnetA:
    Type: AWS::EC2::NatGateway
    Properties: 
      SubnetId: !Ref PublicSubnetA
      Tags: 
        - Key: Name
          Value: PublicSubnetA

##NATgatewayPublicSubnetB
  NATgatewaPublicSubnetB:
    Type: AWS::EC2::NatGateway
    Properties: 
      SubnetId: !Ref PublicSubnetB
      Tags: 
        - Key: Name
          Value: PublicSubnetB


##SecurityGroupWebServers
  SecurityGroupWebservers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH via port 22 and from anywhere via port 8080
      GroupName: Wedservers_EC2_SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - CidrIp: !Ref MySourceIpA
            FromPort: !Ref SecurityGroupPortsWebserversPrivate
            IpProtocol: TCP 
            ToPort: !Ref SecurityGroupPortsWebserversPrivate

          - CidrIp: !Ref MySourceIpB
            FromPort: !Ref SecurityGroupPortsWebservers
            IpProtocol: TCP 
            ToPort: !Ref SecurityGroupPortsWebservers  



##SecurityGroupAppServers
  SecurityGroupAppservers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH via port 22 
      GroupName: Wedservers_EC2_SG
      VpcId: !Ref VPC
      SecurityGroupIngress:
          - CidrIp: !Ref MySourceIpA
            FromPort: !Ref SecurityGroupPortsAppservers
            IpProtocol: TCP 
            ToPort: !Ref SecurityGroupPortsAppservers



##Webserver1:
  Webserver1EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIIDforWebservers
      InstanceType: !Ref InstanceTypeParameterForWebservers
      KeyName: !Ref KeypairforWebservers
      Tags:
        - Key: Name
          Value: Webserver1
        - Key: Production
          Value: Webserver1  
      SubnetId: !Ref PublicSubnetA
      BlockDeviceMappings:
          -
            DeviceName: !Ref DevicenameWebservers
            Ebs: 
              DeleteOnTermination: True
              VolumeSize: !Ref VolumeSizeWebservers
              VolumeType: !Ref VolumeTypeWebservers
      SecurityGroupIds:
          - !Ref SecurityGroupWebservers


##Webserver2:   
  Webserver2EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIIDforWebservers
      InstanceType: !Ref InstanceTypeParameterForWebservers
      KeyName: !Ref KeypairforWebservers
      Tags:
        - Key: Name
          Value: Webserver1
        - Key: Production
          Value: Webserver1  
      SubnetId: !Ref PublicSubnetB
      BlockDeviceMappings:
          -
            DeviceName: !Ref DevicenameWebservers
            Ebs: 
              DeleteOnTermination: True
              VolumeSize: !Ref VolumeSizeWebservers
              VolumeType: !Ref VolumeTypeWebservers
      SecurityGroupIds:
          - !Ref SecurityGroupWebservers 

##Appserver1:
  AppServer1EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIIDforAppservers
      InstanceType: !Ref InstanceTypeParameterForAppservers
      KeyName: !Ref KeypairforAppservers
      Tags:
        - Key: Name
          Value: Appserver1
        - Key: Production
          Value: Appserver1  
      SubnetId: !Ref PrivateSubnetA
      BlockDeviceMappings:
          -
            DeviceName: !Ref DevicenameAppservers
            Ebs: 
              DeleteOnTermination: True
              VolumeSize: !Ref VolumeSizeAppservers
              VolumeType: !Ref VolumeTypeAppservers
      SecurityGroupIds:
          - !Ref SecurityGroupAppservers

##Appserver2:
  AppServer2EC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMIIDforAppservers
      InstanceType: !Ref InstanceTypeParameterForAppservers
      KeyName: !Ref KeypairforAppservers
      Tags:
        - Key: Name
          Value: Appserver2
        - Key: Production
          Value: Appserver2  
      SubnetId: !Ref PrivateSubnetB
      BlockDeviceMappings:
          -
            DeviceName: !Ref DevicenameAppservers
            Ebs: 
              DeleteOnTermination: True
              VolumeSize: !Ref VolumeSizeAppservers
              VolumeType: !Ref VolumeTypeAppservers
      SecurityGroupIds:
          - !Ref SecurityGroupAppservers


##DataBases
  DatabaseEC2:
    Type: AWS::RDS::DBInstance
    Properties: 
      AllocatedStorage: !Ref RequiredStorage
      AllowMajorVersionUpgrade: Yes
      AssociatedRoles: !Ref DatabaseRoles
      DBInstanceClass: !Ref DatabaseClass
      DBName: Master_Ventura_Database
      DBSubnetGroupName: !Ref DatabaseSubnetGroups
      Engine: mysql
      EngineVersion: MySQL 8.0
      MasterUserName: MySQL
      MasterUserPassword: !Ref DatabasePassword
      MultiAZ: Yes
      Port: 3306
      Tags: 
        - Key: Name
          Value: Ventura_Database
      VPCSecurityGroups: !Ref RDSSecurityGroups

Outputs:
  
  Webserver1EC2InstanceId:
    Description: My Wedserver1 EC2 Instance Id
    Value: !Ref Webserver1EC2
    Export: 
      Name: MyWebserver1InstanceId
  
  Webserver2Ec2InstanceId:
    Description: My Webserver2 EC2 Instance Id
    Value: !Ref Webserver2EC2
    Export: 
      Name: MyWebserver2InstanceId

  Webserver1EC2PublicIp: 
    Description: Public Ip of the Webservers
    Value: 
      - !GetAtt Webserver1EC2.PublicIp
    Export:
      Name: Webserver1EC2PublicIp

  Webserver2EC2PublicIp: 
    Description: Public Ip of the Webservers
    Value: 
      - !GetAtt Webserver2EC2.PublicIp
    Export:
      Name: Webserver2EC2PublicIp    


